---
title: "International (English) Names Dataset Creation"
date: "`r format(Sys.time(), '%d %B, %Y')`"
format:
  html:
    toc: true
    toc-location: left
    toc-expand: true
---

```{r setup}
library(readr)
library(readxl)
library(tidyverse); theme_set(theme_bw())
library(broom)
library(flextable)

options(scipen = 999)
```

# Purpose

While there are many projects around collating and exploring baby name data, I have yet to find one that looks at frequency (popularity) over time and country for all the countries I'm interested in.

* [Multinational (but no time dimension)](https://opendata.stackexchange.com/questions/46/multinational-list-of-popular-first-names-and-surnames)
* [CRAN `babynames` package (only USA until 2017)](https://cran.r-project.org/web/packages/babynames/index.html)
* [Australian data `ozbabynames` package (last updated 5+ years ago)](https://github.com/robjhyndman/ozbabynames)
    * [Another attempt to analyze this dataset](https://www.monicaalexander.com/posts/2019-20-01-babynames/)
* [DAMEgender gender estimator (no years)](https://damegender.davidam.com/) ([suspicious views on gender](https://github.com/davidam/damegender/blob/dev/faq.org))
* [First and Last Names Database (no years or counts, just rank)](https://github.com/philipperemy/name-dataset)
* [Popular Names by Country Dataset (excellent but fewer than 3k forenames)](https://github.com/sigpwned/popular-names-by-country-dataset)

There are some good and fairly comprehensive ones out there, but many of them don't document their gathering and wrangling processes or are designed for different purposes. Here is mine.

When designing linguistic stimuli, sometimes we use gender stereotypes to probe comprehension processes. Sometimes we just need a bunch of names in order to vary the content of sentences without distracting from other aspects. Sometimes we need gender ambiguous names. Sometimes we need gender balanced names. Sometimes we need names that evoke certain beliefs or stereotypes. Regardless, the social properties of names change over time as new stereotypes and distributions come to the forefront and are incorporated into individuals understanding of the world.

My project aims to:

1. Collect information about the names (primarily) English-speaking people (in primarily English-speaking countries) are exposed to
2. Identify how exposure in peer groups and in parent/grandparent/child peer groups influences perceptions and stereotypes about names
3. Identify how views of gender influence perceptions and stereotypes about names
4. Investigate how perceptions and stereotypes about names influence related grammatical processes (e.g. coreference)
5. Investigate how perceptions and stereotypes about names influence unrelated grammatical processes (e.g. filled gap effects)
6. Provide a dataset and tools for building informed linguistics example sentences and stimuli
    * gender-fair name selection informed by participant age range
    * finding and selecting racially/ethnically representative names
    * generating age-appropriate lists of gender-balanced (unisex) names
    * identifying names perceived to be (more) 'nonbinary' or 'binary'
    * identifying names perceived to be (more) 'young' or 'old' (relative to participants' age)
    * identifying names marked for other stereotypes (e.g. race, country of origin, socio-economic class)
    * gathering this information *by region* and *by age*, as these stereotypes can vary internationally and generationally


# Gathering raw data

## USA

* Hadley Wickham's `babynames` package only goes to 2017, but that is an alternative for smaller scope projects
* [Beyond the Top 1000 Names](https://www.ssa.gov/OACT/babynames/limits.html)
* Rank info compiled from: [Popular Baby Names (by Birth Year; Number)](https://www.ssa.gov/OACT/babynames/index.html)
    * Ranks are eventually recalculated using the same method as used by the SSA (`ties.method = "first"`).
* Proportion info compiled from: [SSN Holders](https://www.ssa.gov/OACT/babynames/numberUSbirths.html)
    * Proportions are estimates based on SSN registrations in a given year and number of babies registered under a given name

```{r usa_input}
read_delim(file = list.files(path = "data/USA",
                             pattern = "yob",
                             full.names = TRUE),
           col_names = FALSE,
           id = "file",
           show_col_types = FALSE) |> 
  mutate(year = substr(file,13,16) |> as.integer()) |> 
  rename(name = X1, asab = X2, number = X3) |> 
  select(-file) |> 
  # join with SSN applications by year
  left_join(read_csv("data/USA/USA_SSA_applications_1880-2022.csv",
                     show_col_types = FALSE) |>
              rename(year = `year of birth`),
            by = join_by("year")) |> 
  group_by(year,asab) |> 
  # calculate proportion based on ASAB SSN applications
  mutate(proportion = case_when(asab == "M" ~ number/Male,
                                asab == "F" ~ number/Female),
         rank = rank(-number, ties.method = "first") |> as.integer(),
         name = str_to_title(name)) |> 
  select(-c("Male","Female","Total")) |> 
  mutate(region = "USA") -> names_USA
```

## Canada

* [Baby Names Observatory](https://www150.statcan.gc.ca/n1/pub/71-607-x/71-607-x2023021-eng.htm)
* Downloaded from: [https://www150.statcan.gc.ca/t1/tbl1/en/tv.action?pid=1710014701](https://www150.statcan.gc.ca/t1/tbl1/en/tv.action?pid=1710014701) on 1 November 2023

```{r}
read_csv(file = "data/Canada/17100147-eng/17100147.csv",
         show_col_types = FALSE) |> 
  select("REF_DATE","GEO","Sex at birth","First name at birth","Indicator","VALUE") |> 
  pivot_wider(names_from = Indicator, values_from = VALUE) |> 
  rename(year = REF_DATE, region = GEO,
         asab = `Sex at birth`,
         name = `First name at birth`,
         number = Frequency,
         rank = Rank,
         proportion = `Proportion (%)`) |> # proportion by ASAB
  mutate(name = str_to_title(name),
         proportion = proportion/100,
         asab = case_when(asab == "Male" ~ "M",
                          asab == "Female" ~ "F",
                          TRUE ~ "X")) -> names_Canada
```

## United Kingdom

### England and Wales

* [Baby names for England and Wales](https://www.ons.gov.uk/peoplepopulationandcommunity/birthsdeathsandmarriages/livebirths/datasets/babynamesinenglandandwalesfrom1996)
* Only up to 2021
* Does not distinguish between England and Wales

```{r}
read_excel("data/EnglandWales/babynames1996to2021_EnglandWales.xlsx", 
           sheet = "1", # boy baby names
           na = "[x]", 
           skip = 7) |> 
  pivot_longer(cols = 2:53,
               names_to = "year_type",
               values_to = "value") |> 
  separate_wider_delim(cols = year_type, delim = " ", names = c("year", "type")) |> 
  pivot_wider(names_from = type, values_from = value) |> 
  mutate(asab = "M", region = "England and Wales") |> 
  # join with girl baby names
  rbind(read_excel("data/EnglandWales/babynames1996to2021_EnglandWales.xlsx", 
                   sheet = "2", # girl baby names
                   na = "[x]", 
                   skip = 7) |> 
          pivot_longer(cols = 2:53,
                       names_to = "year_type",
                       values_to = "value") |> 
          separate_wider_delim(cols = year_type, 
                               delim = " ", 
                               names = c("year", "type")) |> 
          pivot_wider(names_from = type, values_from = value) |> 
          mutate(asab = "F", region = "England and Wales")) |> 
  # tidy and remove empty rows
  rename(name = Name, rank = Rank, number = Count) |> 
  filter(!is.na(number)) |> 
  group_by(year,asab) |> 
  mutate(proportion = number/sum(number, na.rm = TRUE),
         name = str_to_title(name)) |> 
  ungroup() -> names_EW
```


### Scotland

* National Records of Scotland: Full list 1974-2022 [here](https://www.nrscotland.gov.uk/statistics-and-data/statistics/statistics-by-theme/vital-events/names/babies-first-names/babies-first-names-2022)

```{r}
read_csv("data/Scotland/babies-first-names-all-names-all-years.csv",
         show_col_types = FALSE) |> 
  select(-position) |> # rank is not calculated the same way as for USA, position is a char string
  rename(year = yr, asab = sex, name = FirstForename) |> 
  mutate(asab = case_when(asab == "B" ~ "M",
                          asab == "G" ~ "F",
                          TRUE ~ "X"),
         region = "Scotland",
         name = str_to_title(name)) |> 
  group_by(year,asab) |> 
  mutate(proportion = number/sum(number, na.rm = TRUE)) |> 
  ungroup() -> names_Scotland
```

### Northern Ireland

* NISRA Data for Baby Name Dashboard: [https://www.nisra.gov.uk/publications/data-baby-names-dashboard](https://www.nisra.gov.uk/publications/data-baby-names-dashboard)
* Too many duplicates (due to missing diacritics?) so summing duplicates to calculate numbers by approximate spelling (and re-ranking)

```{r}
read_excel("data/NorthernIreland/Data for Dashboard 2022.xlsx", 
           sheet = "Table 1 - Ranks and Geography", 
           skip = 3) |> 
  rename(year = "Year of Registration",
         asab = "Sex",
         name = "First name",
         number = "Number Given this Name") |> 
  mutate(region = "Northern Ireland",
         asab = case_when(asab == 1 ~ "M",
                          asab == 2 ~ "F",
                          TRUE ~ "X"),
         name = str_to_title(name)) |> 
  group_by(year, name, asab) |> 
  summarise(number = sum(number), .groups = "keep") |> 
  ungroup(name) |> 
  # join with birth data
  left_join(read_excel("data/NorthernIreland/Section 3 - Births_Tables_2022_Revised_Final.xlsx", 
                       sheet = "Table 3.1", skip = 4) |> 
              rename(year = "Year") |> 
              filter(!is.na(Females)) |> 
              mutate(year = as.numeric(year)),
            by = join_by("year")) |> 
  # tidy and organize
  mutate(rank = rank(-number, ties.method = "first"),
         proportion = case_when(asab == "M" ~ number/Males,
                                asab == "F" ~ number/Females),
         region = "Northern Ireland") |> 
  select(-c(`All Births`,Males,Females)) -> names_NI
```


## New Zealand

* Top 100 names since 1954: [https://smartstart.services.govt.nz/news/baby-names](https://smartstart.services.govt.nz/news/baby-names)
* Minimal hand-editing of columns for readability (did not use `tidyxl`)

```{r message=FALSE}
read_excel("data/NewZealand/Top-100-girls-and-boys-names-since-1954-EDITED.xlsx", 
           sheet = "Boys' Names", 
           skip = 6) |> 
  rename(rank = Rank) |> 
  pivot_longer(cols = 2:139, 
               names_to = "X", 
               values_to = "Y",
               names_prefix = "x",
               values_transform = as.character) |> 
  filter(!is.na(rank)) |> 
  separate_wider_delim(cols = X, 
                        delim = "...", 
                        names = c("year", "type")) |> 
  mutate(type = case_when(as.numeric(type) %% 2 == 0 ~ "name",
                          as.numeric(type) %% 2 == 1 ~ "number")) |> 
  pivot_wider(names_from = type,
              values_from = "Y") |> 
  mutate(asab = "M") |> 
  # join with girl names
  rbind(read_excel("data/NewZealand/Top-100-girls-and-boys-names-since-1954-EDITED.xlsx", 
                   sheet = "Girls' Names", 
                   skip = 6) |> 
          rename(rank = Rank) |> 
          pivot_longer(cols = 2:139, 
                       names_to = "X", 
                       values_to = "Y",
                       names_prefix = "x",
                       values_transform = as.character) |> 
          filter(!is.na(rank)) |> 
          separate_wider_delim(cols = X, 
                               delim = "...", 
                               names = c("year", "type")) |> 
          mutate(type = case_when(as.numeric(type) %% 2 == 0 ~ "name",
                                  as.numeric(type) %% 2 == 1 ~ "number")) |> 
          pivot_wider(names_from = type,
                      values_from = "Y") |> 
          mutate(asab = "F")) |> 
  mutate(year = year |> as.integer(),
         number = number |> as.numeric(),
         name = str_to_title(name)) |> 
  # join with birth data
  left_join(read_delim("data/NewZealand/live_births_1954-2022-EDITED.txt", 
                       delim = "\t", escape_double = FALSE, 
                       na = "..", trim_ws = TRUE,
                       show_col_types = FALSE), 
            by = join_by(year)) |> 
  group_by(year,asab) |> 
  mutate(proportion = case_when(is.na(male) | is.na(female) ~ number/sum(number, na.rm = TRUE),#number/total, #(total/2)
                                asab == "M" ~ number/male,
                                asab == "F" ~ number/female),
         region = "New Zealand") |> 
  ungroup() |> 
  #### SEEMS TO HAVE A DUPLICATE MICHAEL, I DONT KNOW HOW BEST TO HANDLE THIS ####
  filter(year != 1988, rank != 100, name != "Michael") |> # Remove duplicate Michael - no evidence this is diacritics
  select(-c(male, female, total)) -> names_NZ
```


## Ireland

* [https://data.cso.ie/](https://data.cso.ie/) > 
* search "name" > 
* select Girls/Boys Names in Ireland with 3 or More Occurrences
* select Statistic (all)
* select Year (all)
* Download to CSV

```{r}
read_csv("data/Ireland/VSA50.20231102T161146-boys.csv",
         show_col_types = FALSE) |> 
  mutate(asab = "M",
         `Statistic Label` = case_when(substr(`Statistic Label`, 50,50)=="R" ~ "rank",
                                       TRUE ~ "number")) |>
  pivot_wider(names_from = `Statistic Label`,
              values_from = VALUE) |> 
  rbind(read_csv("data/Ireland/VSA60.20231102T161100-girls.csv",
                 show_col_types = FALSE) |> 
          mutate(asab = "F",
                 `Statistic Label` = case_when(substr(`Statistic Label`, 51,51)=="R" ~ "rank",
                                               TRUE ~ "number")) |>
          pivot_wider(names_from = `Statistic Label`,
                      values_from = VALUE)) |> 
  select(-UNIT) |> 
  rename(name = Names, year = Year) |> 
  filter(!is.na(number)) |> 
  mutate(region = "Ireland",
         name = str_to_title(name)) |> 
  group_by(year,asab) |> 
  mutate(proportion = number/sum(number, na.rm = TRUE)) |> 
  ungroup() -> names_Ireland
```

## Australia

* Australian birth data is collected at the State/Territory regional level *only*
* There is a 
* [South Australia](https://data.sa.gov.au/data/dataset/popular-baby-names)
* [New South Wales](https://data.nsw.gov.au/data/dataset/popular-baby-names-from-1952)
* [Queensland](https://www.data.qld.gov.au/dataset/top-100-baby-names)
* [Victoria](https://discover.data.vic.gov.au/dataset/popular-baby-names-victoria-api)
* [Tasmania](https://data.gov.au/data/organization/department-of-justice-tasmania?q=names&sort=score+desc%2C+metadata_modified+desc)
* [Northern Territory](https://nt.gov.au/law/bdm/popular-baby-names)
* [Australian Capital Territory](https://www.act.gov.au/our-canberra/latest-news/2022/december/the-most-popular-baby-names-of-2022) ([404 Data currently not available](https://www.act.gov.au/archive/archived-shortlinks/topbabynames); as of 3 November 2023)
* [Western Australia](https://bdm.justice.wa.gov.au/_apps/BabyNames/Default.aspx) (or [here](https://www.wa.gov.au/organisation/department-of-justice/the-registry-of-births-deaths-and-marriages/popular-baby-names))
* [Data Explorer for Births](https://explore.data.abs.gov.au/vis?tm=births&pg=0&df[ds]=ABS_ABS_TOPICS&df[id]=BIRTHS_SUMMARY&df[ag]=ABS&df[vs]=1.0.0&hc[Measure]=Births&pd=1975%2C&dq=5%2B4%2B1..A&ly[cl]=TIME_PERIOD) (from 1975 to 2022)
* National birth data since 1934 (but not by ASAB)

```
# Thanks to Hadas Kotek for parsing the JSON (3 November 2022)
import pandas as pd
import json
with open('victoria_babies_json_query_return.txt') as f:
    json_data = json.load(f)

pd.DataFrame(json_data['popular_baby_names']).to_csv('popular_baby_names.csv', index=False)
```

### Australian Capital Territory

```{r australia_regions}
# ACT
# no data, too small (only releases brief statement)
```

### New South Wales

```{r}
# new south wales
names_nsw <- read_csv("data/Australia/NSW/popular_baby_names_1952_to_2022-v2.csv",
                      show_col_types = FALSE) |> 
  rename(rank = Rank,
         name = Name,
         number = Number,
         asab = Gender,
         year = Year) |> 
  mutate(region = "New South Wales",
         name = str_to_title(name),
         asab = case_when(asab == "Male" ~ "M",
                          asab == "Female" ~ "F",
                          TRUE ~ "X"))
```

### Northern Territory

```{r}
# northern territory (hand-compiled)
names_nt <- read_csv("data/Australia/NT/NT_babynames_1980_2002-2022.csv",
                     show_col_types = FALSE) |> 
  group_by(year, asab) |>  
  mutate(rank = rank(-number, ties.method = "first") |> as.integer(),
         region = "Northern Territory",
         name = str_to_title(name)) |> 
  ungroup()
```

### Queensland

```{r}
# queensland
# 2006-2022
read_csv(file = list.files(path = "data/Australia/Queensland",
                           pattern = ".csv",
                           full.names = TRUE),
         col_names = TRUE,
         id = "file",
         show_col_types = FALSE) |> 
  mutate(file = str_remove(file, "data/Australia/Queensland/"),
         file = str_remove(file, "bdm_top-100-baby-names-"),
         file = str_remove(file, ".csv"),
         row = row_number()) |> 
  rename(year = file,
         name_F = "Girl Names",
         number_F = "Count of Girl Names",
         name_M = "Boy Names",
         number_M = "Count of Boy Names") |> 
  pivot_longer(cols = c(2:5),
               names_to = "label",
               values_to = "values",
               values_transform = list(values = as.character)) |> 
  separate(label, into = c("label", "asab"), sep = "_") |> 
  pivot_wider(names_from = label, values_from = values) |> 
  select(-row) |> 
  group_by(year, asab) |> 
  mutate(year = str_sub(year, start = -4, end = -1),
         number = as.numeric(number),
         year = as.numeric(year),
         rank = rank(-number, ties.method = "first") |> as.integer(),
         region = "Queensland") |> 
  ungroup() |> 
  filter(!is.na(name)) |> 
  # join with data from 1960-2005
  rbind(queensland_1960_2005 <- read_csv(file = list.files(path = "data/Australia/Queensland/long_format",
                                                           pattern = ".csv",
                                                           full.names = TRUE),
                                         col_names = TRUE,
                                         id = "file",
                                         show_col_types = FALSE) |> 
          rename(name = "Name",
                 asab = "Sex",
                 year = "Year",
                 number = "Count") |> 
          group_by(year, asab) |> 
          mutate(name = str_to_title(name),
                 asab = case_when(asab == "Male" ~ "M",
                                  asab == "Female" ~ "F",
                                  TRUE ~ "X"),
                 rank = rank(-number) |> as.integer(),
                 region = "Queensland") |> 
          ungroup() |> select(-file)) |> 
  mutate(name = str_to_title(name)) -> names_queensland
```

### South Australia

Possible South Australia name data problem:

* female_cy1968_top.csv : `(NOT`
* male_cy1968_top.csv : `(NOT`
* male_cy1968_top.csv : `(NOT`
* male_cy1976_top.csv : `?LIAM`

These are likely errors in data entry but they do not seem to be recoverable as this is the data as provided. Since `?LIAM` only occurs once, I believe it is safe to keep it in as noise, but since `(NOT` occurs 8 times in one year across both ASAB categories, I believe it should be removed. A brief exploration suggests there is not another word or words in 1968 in South Australia that have been erroneously included (i.e. whatever text followed 'NOT'), but I am not 100% certain.

```{r}
# south australia
read_csv(file = list.files(path = "data/Australia/SouthAustralia/Baby Names 1944-2013",
                           pattern = ".csv",
                           full.names = TRUE),
         col_names = TRUE,
         id = "file",
         show_col_types = FALSE) |> 
  mutate(file = str_remove(file, "data/Australia/SouthAustralia/Baby Names 1944-2013/"),
         file = str_remove(file, "_top.csv")) |> 
  rbind(# had to manually rename "Number" to "Amount" for 2016 files
    read_csv(file = list.files(path = "data/Australia/SouthAustralia",
                               pattern = ".csv",
                               full.names = TRUE),
             col_names = TRUE,
             id = "file",
             show_col_types = FALSE) |> 
      mutate(file = str_remove(file, "data/Australia/SouthAustralia/"),
             file = str_remove(file, ".csv"),
             file = str_remove(file, "top"))) |> 
  rename(name = "Given Name",
         number = "Amount") |> 
  # several files were only top 100 names, not all names, so this throws a warning about file name
  separate(file, into = c("asab","year"), sep = "_") |> 
  group_by(year, asab) |> 
  mutate(name = str_to_title(name),
         rank = rank(-number, ties.method = "first") |> as.integer(),
         asab = case_when(asab == "female" ~ "F",
                          asab == "male" ~ "M",
                          TRUE ~ "X"),
         region = "South Australia",
         year = str_sub(year, -4, -1) |> as.numeric()) |> 
  select(-Position) |> 
  filter(name != "TOTAL", # 2016 included "TOTAL" as if it were a name
         name != "(Not") |> # REMOVE HIGHER FREQUENCY BAD DATA
  ungroup() -> names_soz
```

### Tasmania

```{r}
# tasmania (2015 and 2016 only, from website)
# taz_top_baby_names_for_2016 
read_excel("data/Australia/Tasmania/top-baby-names-for-2016.xlsx", # needs BIG cleaning
           col_names = FALSE, range = "A3:B136",
           .name_repair = "unique_quiet") |> 
  mutate(asab = "F",
         rank = rank(-`...2`, ties.method = "first")) |> 
  rbind(read_excel("data/Australia/Tasmania/top-baby-names-for-2016.xlsx", # needs BIG cleaning
                   col_names = FALSE, range = "A141:B284",
                   .name_repair = "unique_quiet") |> 
          mutate(asab = "M",
                 rank = rank(-`...2`, ties.method = "first"))) |> 
  rename(name = `...1`,
         number = `...2`) |> 
  mutate(name = str_to_title(name),
         year = 2016,
         region = "Tasmania") |> 
  # join taz_dataset_topbabynamesfor2015 girls names
  rbind(read_excel("data/Australia/Tasmania/dataset-topbabynamesfor2015.xlsx", 
                   sheet = "Top Baby Names 2015 - Female", 
                   col_names = FALSE, skip = 1,
                   .name_repair = "unique_quiet") |> 
          rename(name = `...1`,
                 number = `...2`) |> 
          mutate(name = str_to_title(name),
                 year = 2015,
                 rank = rank(-number) |> as.integer(),
                 asab = "F",
                 region = "Tasmania")) |> 
  # join taz_dataset_topbabynamesfor2015 boys names
  rbind(read_excel("data/Australia/Tasmania/dataset-topbabynamesfor2015.xlsx", 
                   sheet = "Top Baby Names 2015 - Male", 
                   col_names = FALSE, skip = 1,
                   .name_repair = "unique_quiet") |> 
          rename(name = `...1`,
                 number = `...2`) |> 
          mutate(name = str_to_title(name),
                 year = 2015,
                 rank = rank(-number) |> as.integer(),
                 asab = "M",
                 region = "Tasmania")) |> 
  mutate(name = str_to_title(name)) -> names_tasmania
```

### Victoria

```{r} 
# victoria (parsed from JSON)
read_csv("data/Australia/Victoria/popular_baby_names.csv",
         show_col_types = FALSE) |> 
  rename(rank = position,
         number = count,
         asab = sex) |> 
  mutate(region = "Victoria",
         asab = case_when(asab == "MALE" ~ "M",
                          asab == "FEMALE" ~ "F",
                          TRUE ~ "X"),
         name = str_to_title(name)) -> names_victoria
```

### Western Australia

```{r}
# western australia (hand-compiled from website)
#WA_babynames_1930_2022 <- 
read_csv("data/Australia/WesternAustralia/WA_babynames_1930-2022.csv",
         show_col_types = FALSE) |> 
  mutate(region = "Western Australia",
         name = str_to_title(name)) -> names_woz
```

### Australia Combined

```{r australia_together}
# combine australian data
names_nsw |> 
  rbind(names_nt) |> 
  rbind(names_queensland) |> 
  rbind(names_soz) |> 
  rbind(names_tasmania) |> 
  rbind(names_victoria) |> 
  rbind(names_woz) |> #-> names_Australia
  group_by(name, asab, year) |> 
  summarise(number = sum(number),
            .groups = "drop") |> 
  # join with detailed births information
  left_join(read_csv("data/Australia/ABS_BIRTHS_SUMMARY_1.0.0_4+5+1..A.csv",
                     show_col_types = FALSE) |> # messy data, needs cleaning
              rename(measure = `MEASURE: Measure`,
                     region2 = `REGION: Region`,
                     year = `TIME_PERIOD: Time Period`,
                     population = OBS_VALUE) |> 
              select(measure, region2, year, population) |> 
              filter(region2 == "AUS: Australia",
                     measure != "1: Births") |> 
              pivot_wider(names_from = measure,
                          values_from = population),
            by = join_by("year")) |> 
  mutate(proportion = case_when(asab == "M" ~ number/`4: Male births`,
                                asab == "F" ~ number/`5: Female births`),
         region = "Australia") |> 
  group_by(year, asab) |> 
  mutate(rank = rank(-number, ties.method = "first")) |> 
  select(year, name, number, rank, asab, region, proportion) |> 
  ungroup() |> 
  # join with older historical data (missing ASAB; solution *estimate* by multiplying annual births by .5)
  left_join(read_csv("data/Australia/Births registered – 1934 to 2022(a).csv", skip = 1,
                     show_col_types = FALSE) |> 
              rename(year = Year, 
                     population = `Births registered`),
            by = join_by("year")) |> 
  mutate(proportion = case_when(is.na(proportion) ~ number/(population*.5), # no births by ASAB data, going by .5 of annual births
                                TRUE ~ proportion)) |> 
  select(-population) -> names_Australia
```

## South Africa

* Can't find annual name data beyond [this](https://www.statssa.gov.za/?p=11472)

## Other places

* Eventually, I would like to add India, China, Japan, Germany, Mexico, and perhaps other places that have large English-speaking populations or large immigrant communities in English-speaking countries. However, this requires resources beyond what I currently have.

# International Combined

```{r}
names_Australia |> 
  rbind(names_Canada) |> 
  rbind(names_EW) |> 
  rbind(names_Ireland) |> 
  rbind(names_NI) |> 
  rbind(names_NZ) |> 
  rbind(names_Scotland) |> 
  rbind(names_USA) -> names_combined
```

Write to file for ease of use elsewhere
```{r write_names_combined, eval=FALSE}
write_csv(names_combined, "data/large_files/names_combined.csv")

#write_csv(names_Australia, "data/large_files/names_Australia.csv")
#write_csv(names_Canada, "data/large_files/names_Canada.csv")
#write_csv(names_EW, "data/large_files/names_EW.csv")
#write_csv(names_Ireland, "data/large_files/names_Ireland.csv")
#write_csv(names_NI, "data/large_files/names_NI.csv")
#write_csv(names_NZ, "data/large_files/names_NZ.csv")
#write_csv(names_Scotland, "data/large_files/names_Scotland.csv")
#write_csv(names_USA, "data/large_files/names_USA.csv")
```

## List of names

In order to elicit ratings of the names in this dataset for research and norming purposes, I need to create a list of all the names without any repeats. I will format it for use in Gorilla (online survey tool).

```{r}
names_combined |> 
  group_by(name) |> 
  summarise(count = n(),
            .groups = "drop") |> 
  filter(count >= 100) |> 
  mutate(freq_block = round(count, digits = -2)) -> names_for_rating

names_for_rating |> group_by(freq_block) |> summarise(n = n())



names_for_rating |> 
  select(-count) |> 
  mutate(display = "Rating") |> 
  select(display, name, freq_block) -> Name_Rating_Spreadsheet

#write_csv(Name_Rating_Spreadsheet, "data/large_files/Name_Rating_Spreadsheet.csv")
```


# Demonstration

Briefly, here are some tests of the dataset to demonstrate its utility.

## Unisex or gender-balanced names

The names in `unisex_names` are a complete list of names that occur at least once in both AMAB and AFAB entries. This does not account for data entry errors or other noise in the datasets.

```{r unisex}
# create a list of AFAB names
names_combined |> 
  filter(asab == "F",
         region == "USA" & number > 50 |
           region != "USA" & number > 0) -> afab_names

# create a list of AMAB names
names_combined |> filter(asab == "M",
         region == "USA" & number > 50 |
           region != "USA" & number > 0) -> amab_names

# find intersection of AFAB and AMAB names, regardless of frequency
intersect(afab_names |> 
            pull(name), 
          amab_names |> 
            pull(name)) -> unisex_names
```

Of the `unisex_names`, which ones occur in at least 0.05% of the population? This helps control for wildly different population sizes of each country, but also helps weed out noise from data entry errors. 

However, I believe the large population of the USA and some possible larger-scale data entry errors could be boosting names like "Mary" and "Samantha" into this list. It is worth exploring in the future.

```{r list_top_unisex}
names_combined |> 
  ## CHECK FOR DUPLICATES BEFORE PIVOTING
  # group_by(name,asab,region,year) |> 
  # summarise(n = n(),
  #           .groups = "drop") |> 
  # filter(n != 1)
  ## COMBINE NAMES IF DATA IS WELL STRUCTURED
  pivot_wider(names_from = "asab", 
              values_from = c(number,proportion,rank)) |> # view() # ,values_fn = list(ppg = length)
  filter(name %in% unisex_names,
         proportion_M > 0.0005,
         proportion_F > 0.0005,
         !is.na(proportion_M),
         !is.na(proportion_F)) |> pull(name) |> unique()
```

what was i doing here? looks like creating datasets to label plots (see sandbox)
```{r}
#names_combined |> 
#  pivot_wider(names_from = "asab", values_from = c(number,proportion,rank)) |>
#  filter(name %in% unisex_names,
#         !is.na(proportion_M),
#         !is.na(proportion_F),
#         number_M >= 3,
#         number_F >= 3,
#         #proportion_M > 0.0001,
#         #proportion_F > 0.0001,
#         #name != "Mary",
#         name != "Baby"
#         ) |> 
#  group_by(name, region) |> 
#  summarise(proportion_M = max(proportion_M),
#            proportion_F = max(proportion_F),
#            .groups = "drop") -> prop.labels

names_combined |> 
  pivot_wider(names_from = "asab", values_from = c(number,proportion,rank)) |>
  filter(name %in% unisex_names,
         !is.na(proportion_M),
         !is.na(proportion_F),
         number_M >= 3,
         number_F >= 3,
         #proportion_M > 0.0001,
         #proportion_F > 0.0001,
         #name != "Mary",
         name != "Baby"
         ) |> 
  group_by(name, region) |> 
  summarise(number_M = max(number_M),
            number_F = max(number_F),
            .groups = "drop") -> num.labels

num.labels |> 
  group_by(name) |> 
  summarise(count = n(),
            .groups = "drop") |> 
  arrange(-count) |> 
  #filter(count >=7) |> 
  pull(name) -> top.names.combined
```

Create a table of international names, but why with `num.labels`? go back to this
```{r}
names_combined |> 
  pivot_wider(names_from = "asab", values_from = c(number,proportion,rank)) |>
  filter(name %in% unisex_names,
         !is.na(proportion_M),
         !is.na(proportion_F),
    # WHAT TO EXCLUDE BASED ON RARITY?
         #number_M >= 3,
         #number_F >= 3,
         #proportion_M > 0.0001,
         #proportion_F > 0.0001,
         #name != "Mary",
         name != "Baby",
         name != "Unnamed") |> 
  group_by(name, region) |> 
  summarise(number_M = max(number_M),
            number_F = max(number_F),
            .groups = "keep") |> 
  ungroup(region) |> 
  mutate(count = n()) |> 
  filter(abs(number_M/number_F) >= 0.1,
         abs(number_F/number_M) >= 0.1,
         number_M > 3,
         number_F > 3)|> 
  summarise(count = n(), 
            countries = paste(region, collapse = "; "),
            .groups = "drop") |> 
  arrange(count)  |> 
  ungroup() -> top.names.summary
  
names.table <- list()

for (i in 1:max(top.names.summary$count)) {
  max_length <- top.names.summary |> group_by(count) |> summarise(n = n()) |> pull(n) |> max()
  name_vector <- rep(NA, times = max_length)
  num_of_names <- top.names.summary |> group_by(count) |> summarise(n = n()) |> filter(count==i) |> pull(n)
  for (j in 1:num_of_names) {
    name_vector[j] <- top.names.summary |> filter(count == i) |> pull(name) |> nth(j)
  }
  names.table[[i]] <- name_vector
  rm(name_vector, num_of_names,max_length)
}

names.table %>% map_dfr(~ .x %>% as_tibble(), .id = "count") |> 
  pivot_wider(names_from = count, values_from = value, values_fn = list) |> 
  unnest(cols = everything()) -> international_unisex_names

international_unisex_names |> 
  select(-c("1","2","3")) |> 
  filter(!is.na(`4`)) |> 
  flextable()
```

```{r, fig.height=8, fig.width=18, warning=FALSE}
names_combined |> 
  filter(name %in% c(pull(.data = international_unisex_names, var = `7`),
                     pull(.data = international_unisex_names, var = `8`))) |> 
  pivot_wider(names_from = "asab", values_from = c(number,proportion,rank)) |> 
  ggplot(aes(x = proportion_M, 
             y = proportion_F,
             color = region,
             label = region)) +
  geom_abline(slope = 1, intercept = 0) +
  geom_path(aes(group = region)) +
  ggrepel::geom_text_repel(aes(label = year), 
                           size = 2, 
                           color = "black", 
                           alpha = .5,max.overlaps = 20,) +
  xlab("proportion of the AMAB population registered with this name in a given year") +
  ylab("proportion of the AFAB population registered with this name in a given year") +
  scale_x_log10(labels = scales::percent_format()) +
  scale_y_log10(labels = scales::percent_format()) +
  #scale_color_manual(values = c("red","orange","gold","green3","cyan2","blue","blueviolet","violet")) +
  scale_color_viridis_d(option = "turbo") +
  facet_wrap(~name, scales = "free", ncol = 5) +
  NULL
```


```{r, fig.height=8, fig.width=18, warning=FALSE}
names_combined |> 
  filter(name %in% c(pull(.data = international_unisex_names, var = `7`),
                     pull(.data = international_unisex_names, var = `8`))) |> 
  pivot_wider(names_from = "asab", values_from = c(number,proportion,rank)) |> 
  ggplot(aes(x = number_M, 
             y = number_F,
             color = region,
             label = region)) +
  geom_abline(slope = 1, intercept = 0) +
  geom_path(aes(group = region)) +
  ggrepel::geom_text_repel(aes(label = year), 
                           size = 2, 
                           color = "black", 
                           alpha = .5,max.overlaps = 20,) +
  xlab("proportion of the AMAB population registered with this name in a given year") +
  ylab("proportion of the AFAB population registered with this name in a given year") +
  scale_x_log10() +
  scale_y_log10() +
  #scale_color_manual(values = c("red","orange","gold","green3","cyan2","blue","blueviolet","violet")) +
  scale_color_viridis_d(option = "turbo") +
  facet_wrap(~name, ncol = 5) + #, scales = "free"
  NULL
```


```{r, warning=FALSE, message=FALSE, fig.height=16, fig.width=24}
names_combined |> 
  pivot_wider(names_from = "asab", values_from = c(number,proportion,rank)) |>
  filter(name %in% unisex_names,
         !is.na(proportion_M),
         !is.na(proportion_F),
         proportion_M > 0.0005,
         proportion_F > 0.0005,
         name != "Mary") |>
  arrange(region,name,year) |> 
  filter(name %in% top.names.combined) |> 
  group_by(region, name) |> mutate(n = n()) |> ungroup() |> filter(n > 1) |> 
  ggplot(aes(x = proportion_M, 
             y = proportion_F,
             color = region,
             label = region)) +
  geom_abline(slope = 1, intercept = 0) +
  geom_path(aes(group = region)) +
  ggrepel::geom_text_repel(aes(label = year), 
                           size = 2, 
                           color = "black", 
                           alpha = .5,max.overlaps = 20,) +
  facet_wrap(~name, scales = "free") +
  xlab("proportion of the AMAB population registered with this name in a given year") +
  ylab("proportion of the AFAB population registered with this name in a given year") +
  scale_x_continuous(labels = scales::percent_format()) +
  scale_y_continuous(labels = scales::percent_format()) +
  scale_color_manual(values = c("red","orange","gold","green3","cyan2","blue","blueviolet","violet")) +
  NULL
```

